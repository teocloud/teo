import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.json.Json
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.modules.SerializersModule
import kotlinx.serialization.modules.plus

@Serializable
data class ResponseWithMeta<M, D>(val meta: M, val data: D)

@Serializable
data class Response<D>(val data: D)

@Serializable(NullSerializer::class)
object NULL { }

object NullSerializer : KSerializer<NULL> {
    override val descriptor: SerialDescriptor
        get() = PrimitiveSerialDescriptor("NULL", PrimitiveKind.INT)

    override fun deserialize(decoder: Decoder): NULL {
        return NULL
    }

    @OptIn(ExperimentalSerializationApi::class)
    override fun serialize(encoder: Encoder, value: NULL) {
        (encoder as JsonEncoder).encodeJsonElement(JsonPrimitive(null))
    }
}

object AnySerializer : JsonContentPolymorphicSerializer<Any>(Any::class) {
    override fun selectDeserializer(content: JsonElement) = throw NotImplementedError()
}

@OptIn(ExperimentalSerializationApi::class)
val json_serializer = Json {
    explicitNulls = false
}
