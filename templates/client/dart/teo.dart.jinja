library {{ conf.inferred_package_name_snake_case() }};

import 'dart:convert';
import 'package:json_annotation/json_annotation.dart';
import 'package:http/http.dart' as http;
import 'package:decimal/decimal.dart';

part '{{ conf.inferred_package_name_snake_case() }}.g.dart';

@JsonSerializable(explicitToJson: true, includeIfNull: true, createFactory: false)
class ExplicitNull {
  dynamic set;
  ExplicitNull();
  Map<String, dynamic> toJson() => _$ExplicitNullToJson(this);
}

enum SortOrder {
  @JsonValue("asc") asc,
  @JsonValue("desc") desc,
}

class Response<D> {
  D data;
  Response({ required this.data });
}

class ResponseWithMeta<M, D> {
  D data;
  M meta;
  ResponseWithMeta({ required this.data, required this.meta });
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class PagingInfo {
  int count;
  int? numberOfPages;
  PagingInfo({ required this.count, this.numberOfPages });
  factory PagingInfo.fromJson(Map<String, dynamic> json) =>
      _$PagingInfoFromJson(json);
  Map<String, dynamic> toJson() => _$PagingInfoToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class TokenInfo {
  String token;
  TokenInfo({ required this.token });
  factory TokenInfo.fromJson(Map<String, dynamic> json) =>
      _$TokenInfoFromJson(json);
  Map<String, dynamic> toJson() => _$TokenInfoToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class TeoError {
  String type;
  String message;
  Map<String, String>? errors;
  TeoError({ required this.type, required this.message, this.errors });
  factory TeoError.fromJson(Map<String, dynamic> json) => _$TeoErrorFromJson(json);
  Map<String, dynamic> toJson() => _$TeoErrorToJson(this);
  String toString() => this.toJson().toString();
}

Future<dynamic> request<D, M>(
    String action, String model, dynamic args, String? token,
    D Function(dynamic) data, M Function(dynamic)? meta
) async {
  final res = await http.post(
    Uri.parse('{{ conf.host }}/$model/action/$action'),
    headers: token != null ? {
      "Authorization": "Bearer $token"
    } : { },
    body: jsonEncode(args),
  );
  final Map<String, dynamic> jsonData = jsonDecode(res.body);
  if (jsonData.containsKey("error")) {
    throw TeoError.fromJson(jsonData["error"]);
  } else {
    if (meta == null) {
      return Response(data: data(jsonData["data"]));
    } else {
      return ResponseWithMeta(data: data(jsonData["data"]), meta: meta(jsonData["meta"]));
    }
  }
}

dynamic anyToJson(dynamic any) {
  if (any is List) {
    return any.map((e) => anyToJson(e)).toList();
  } else if (any is int) {
    return any;
  } else if (any is double) {
    return any;
  } else if (any is bool) {
    return any;
  } else if (any is String) {
    return any;
  } else if (any == null) {
    return null;
  } else if (any is DateTime) {
    return any.toIso8601String();
  } else {
    return any.toJson();
  }
}

DateTime fromTeoDateTime(Map<String, dynamic> arg) {
  return DateTime.parse(arg["\$date"]! as String);
}

Decimal fromTeoDecimal(Map<String, dynamic> arg) {
  return Decimal.parse(arg["\$decimal"]! as String);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class ObjectIdFilter {
  String? equals;
  @JsonKey(name: 'in')
  List<String>? isOneOf;
  List<String>? notIn;
  String? lt;
  String? lte;
  String? gt;
  String? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  ObjectIdFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$ObjectIdFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class ObjectIdNullableFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<String>? isOneOf;
  List<String>? notIn;
  String? lt;
  String? lte;
  String? gt;
  String? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  ObjectIdNullableFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$ObjectIdNullableFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class StringFilter {
  String? equals;
  @JsonKey(name: 'in')
  List<String>? isOneOf;
  List<String>? notIn;
  String? lt;
  String? lte;
  String? gt;
  String? gte;
  String? contains;
  String? startsWith;
  String? endsWith;
  String? matches;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  StringFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.contains,
    this.startsWith,
    this.endsWith,
    this.matches,
    this.not,
  });
  Map<String, dynamic> toJson() => _$StringFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class StringNullableFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<String>? isOneOf;
  List<String>? notIn;
  String? lt;
  String? lte;
  String? gt;
  String? gte;
  String? contains;
  String? startsWith;
  String? endsWith;
  String? matches;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  StringNullableFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.contains,
    this.startsWith,
    this.endsWith,
    this.matches,
    this.not,
  });
  Map<String, dynamic> toJson() => _$StringNullableFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class StringWithAggregatesFilter {
  String? equals;
  @JsonKey(name: 'in')
  List<String>? isOneOf;
  List<String>? notIn;
  String? lt;
  String? lte;
  String? gt;
  String? gte;
  String? contains;
  String? startsWith;
  String? endsWith;
  String? matches;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  @JsonKey(name: '_count')
  IntFilter? $count;
  @JsonKey(name: '_min')
  StringFilter? $min;
  @JsonKey(name: '_max')
  StringFilter? $max;
  StringWithAggregatesFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.contains,
    this.startsWith,
    this.endsWith,
    this.matches,
    this.not,
    this.$count,
    this.$min,
    this.$max,
  });
  Map<String, dynamic> toJson() => _$StringWithAggregatesFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class StringNullableWithAggregatesFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<String>? isOneOf;
  List<String>? notIn;
  String? lt;
  String? lte;
  String? gt;
  String? gte;
  String? contains;
  String? startsWith;
  String? endsWith;
  String? matches;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  @JsonKey(name: '_count')
  IntNullableFilter? $count;
  @JsonKey(name: '_min')
  StringNullableFilter? $min;
  @JsonKey(name: '_max')
  StringNullableFilter? $max;
  StringNullableWithAggregatesFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.contains,
    this.startsWith,
    this.endsWith,
    this.matches,
    this.not,
    this.$count,
    this.$min,
    this.$max,
  });
  Map<String, dynamic> toJson() => _$StringNullableWithAggregatesFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class BoolFilter {
  bool? equals;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  BoolFilter({
    this.equals,
    this.not,
  });
  Map<String, dynamic> toJson() => _$BoolFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class BoolNullableFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  BoolNullableFilter({
    this.equals,
    this.not,
  });
  Map<String, dynamic> toJson() => _$BoolNullableFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class BoolWithAggregatesFilter {
  bool? equals;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  @JsonKey(name: '_count')
  IntFilter? $count;
  @JsonKey(name: '_min')
  BoolFilter? $min;
  @JsonKey(name: '_max')
  BoolFilter? $max;
  BoolWithAggregatesFilter({
    this.equals,
    this.not,
    this.$count,
    this.$min,
    this.$max,
  });
  Map<String, dynamic> toJson() => _$BoolWithAggregatesFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class BoolNullableWithAggregatesFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  @JsonKey(name: '_count')
  IntNullableFilter? $count;
  @JsonKey(name: '_min')
  BoolNullableFilter? $min;
  @JsonKey(name: '_max')
  BoolNullableFilter? $max;
  BoolNullableWithAggregatesFilter({
    this.equals,
    this.not,
    this.$count,
    this.$min,
    this.$max,
  });
  Map<String, dynamic> toJson() => _$BoolNullableWithAggregatesFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class IntFilter {
  int? equals;
  @JsonKey(name: 'in')
  List<int>? isOneOf;
  List<int>? notIn;
  int? lt;
  int? lte;
  int? gt;
  int? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  IntFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$IntFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class IntNullableFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<int>? isOneOf;
  List<int>? notIn;
  int? lt;
  int? lte;
  int? gt;
  int? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  IntNullableFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$IntNullableFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class IntWithAggregatesFilter {
  int? equals;
  @JsonKey(name: 'in')
  List<int>? isOneOf;
  List<int>? notIn;
  int? lt;
  int? lte;
  int? gt;
  int? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  @JsonKey(name: '_count')
  IntFilter? $count;
  @JsonKey(name: '_avg')
  DoubleFilter? $avg;
  @JsonKey(name: '_sum')
  IntFilter? $sum;
  @JsonKey(name: '_min')
  IntFilter? $min;
  @JsonKey(name: '_max')
  IntFilter? $max;
  IntWithAggregatesFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
    this.$count,
    this.$avg,
    this.$sum,
    this.$min,
    this.$max,
  });
  Map<String, dynamic> toJson() => _$IntWithAggregatesFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class IntNullableWithAggregatesFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<int>? isOneOf;
  List<int>? notIn;
  int? lt;
  int? lte;
  int? gt;
  int? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  @JsonKey(name: '_count')
  IntNullableFilter? $count;
  @JsonKey(name: '_avg')
  DoubleNullableFilter? $avg;
  @JsonKey(name: '_sum')
  IntNullableFilter? $sum;
  @JsonKey(name: '_min')
  IntNullableFilter? $min;
  @JsonKey(name: '_max')
  IntNullableFilter? $max;
  IntNullableWithAggregatesFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
    this.$count,
    this.$avg,
    this.$sum,
    this.$min,
    this.$max,
  });
  Map<String, dynamic> toJson() => _$IntNullableWithAggregatesFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DoubleFilter {
  double? equals;
  @JsonKey(name: 'in')
  List<double>? isOneOf;
  List<double>? notIn;
  double? lt;
  double? lte;
  double? gt;
  double? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  DoubleFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$DoubleFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DoubleNullableFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<double>? isOneOf;
  List<double>? notIn;
  double? lt;
  double? lte;
  double? gt;
  double? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  DoubleNullableFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$DoubleNullableFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DoubleWithAggregatesFilter {
  double? equals;
  @JsonKey(name: 'in')
  List<double>? isOneOf;
  List<double>? notIn;
  double? lt;
  double? lte;
  double? gt;
  double? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  @JsonKey(name: '_count')
  IntFilter? $count;
  @JsonKey(name: '_avg')
  DoubleFilter? $avg;
  @JsonKey(name: '_sum')
  DoubleFilter? $sum;
  @JsonKey(name: '_min')
  DoubleFilter? $min;
  @JsonKey(name: '_max')
  DoubleFilter? $max;
  DoubleWithAggregatesFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
    this.$count,
    this.$avg,
    this.$sum,
    this.$min,
    this.$max,
  });
  Map<String, dynamic> toJson() => _$DoubleWithAggregatesFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DoubleNullableWithAggregatesFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<double>? isOneOf;
  List<double>? notIn;
  double? lt;
  double? lte;
  double? gt;
  double? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  @JsonKey(name: '_count')
  IntNullableFilter? $count;
  @JsonKey(name: '_avg')
  DoubleNullableFilter? $avg;
  @JsonKey(name: '_sum')
  DoubleNullableFilter? $sum;
  @JsonKey(name: '_min')
  DoubleNullableFilter? $min;
  @JsonKey(name: '_max')
  DoubleNullableFilter? $max;
  DoubleNullableWithAggregatesFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
    this.$count,
    this.$avg,
    this.$sum,
    this.$min,
    this.$max,
  });
  Map<String, dynamic> toJson() => _$DoubleNullableWithAggregatesFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DecimalFilter {
  Decimal? equals;
  @JsonKey(name: 'in')
  List<Decimal>? isOneOf;
  List<Decimal>? notIn;
  Decimal? lt;
  Decimal? lte;
  Decimal? gt;
  Decimal? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  DecimalFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$DecimalFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DecimalNullableFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<Decimal>? isOneOf;
  List<Decimal>? notIn;
  Decimal? lt;
  Decimal? lte;
  Decimal? gt;
  Decimal? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  DecimalNullableFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$DecimalNullableFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DecimalWithAggregatesFilter {
  Decimal? equals;
  @JsonKey(name: 'in')
  List<Decimal>? isOneOf;
  List<Decimal>? notIn;
  Decimal? lt;
  Decimal? lte;
  Decimal? gt;
  Decimal? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  @JsonKey(name: '_count')
  IntFilter? $count;
  @JsonKey(name: '_avg')
  DecimalFilter? $avg;
  @JsonKey(name: '_sum')
  DecimalFilter? $sum;
  @JsonKey(name: '_min')
  DecimalFilter? $min;
  @JsonKey(name: '_max')
  DecimalFilter? $max;
  DecimalWithAggregatesFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
    this.$count,
    this.$avg,
    this.$sum,
    this.$min,
    this.$max,
  });
  Map<String, dynamic> toJson() => _$DecimalWithAggregatesFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DecimalNullableWithAggregatesFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<Decimal>? isOneOf;
  List<Decimal>? notIn;
  Decimal? lt;
  Decimal? lte;
  Decimal? gt;
  Decimal? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  @JsonKey(name: '_count')
  IntNullableFilter? $count;
  @JsonKey(name: '_avg')
  DecimalNullableFilter? $avg;
  @JsonKey(name: '_sum')
  DecimalNullableFilter? $sum;
  @JsonKey(name: '_min')
  DecimalNullableFilter? $min;
  @JsonKey(name: '_max')
  DecimalNullableFilter? $max;
  DecimalNullableWithAggregatesFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
    this.$count,
    this.$avg,
    this.$sum,
    this.$min,
    this.$max,
  });
  Map<String, dynamic> toJson() => _$DecimalNullableWithAggregatesFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DateFilter {
  String? equals;
  @JsonKey(name: 'in')
  List<String>? isOneOf;
  List<String>? notIn;
  String? lt;
  String? lte;
  String? gt;
  String? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  DateFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$DateFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DateNullableFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<String>? isOneOf;
  List<String>? notIn;
  String? lt;
  String? lte;
  String? gt;
  String? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  DateNullableFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$DateNullableFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DateWithAggregatesFilter {
  String? equals;
  @JsonKey(name: 'in')
  List<String>? isOneOf;
  List<String>? notIn;
  String? lt;
  String? lte;
  String? gt;
  String? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  @JsonKey(name: '_count')
  IntFilter? $count;
  @JsonKey(name: '_min')
  StringFilter? $min;
  @JsonKey(name: '_max')
  StringFilter? $max;
  DateWithAggregatesFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
    this.$count,
    this.$min,
    this.$max,
  });
  Map<String, dynamic> toJson() => _$DateWithAggregatesFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DateNullableWithAggregatesFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<String>? isOneOf;
  List<String>? notIn;
  String? lt;
  String? lte;
  String? gt;
  String? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  @JsonKey(name: '_count')
  IntNullableFilter? $count;
  @JsonKey(name: '_min')
  StringNullableFilter? $min;
  @JsonKey(name: '_max')
  StringNullableFilter? $max;
  DateNullableWithAggregatesFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
    this.$count,
    this.$min,
    this.$max,
  });
  Map<String, dynamic> toJson() => _$DateNullableWithAggregatesFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DateTimeFilter {
  DateTime? equals;
  @JsonKey(name: 'in')
  List<DateTime>? isOneOf;
  List<DateTime>? notIn;
  DateTime? lt;
  DateTime? lte;
  DateTime? gt;
  DateTime? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  DateTimeFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$DateTimeFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DateTimeNullableFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<DateTime>? isOneOf;
  List<DateTime>? notIn;
  DateTime? lt;
  DateTime? lte;
  DateTime? gt;
  DateTime? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  DateTimeNullableFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$DateTimeNullableFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DateTimeWithAggregatesFilter {
  DateTime? equals;
  @JsonKey(name: 'in')
  List<DateTime>? isOneOf;
  List<DateTime>? notIn;
  DateTime? lt;
  DateTime? lte;
  DateTime? gt;
  DateTime? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  @JsonKey(name: '_count')
  IntFilter? $count;
  @JsonKey(name: '_min')
  DateTimeFilter? $min;
  @JsonKey(name: '_max')
  DateTimeFilter? $max;
  DateTimeWithAggregatesFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
    this.$count,
    this.$min,
    this.$max,
  });
  Map<String, dynamic> toJson() => _$DateTimeWithAggregatesFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DateTimeNullableWithAggregatesFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<DateTime>? isOneOf;
  List<DateTime>? notIn;
  DateTime? lt;
  DateTime? lte;
  DateTime? gt;
  DateTime? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  @JsonKey(name: '_count')
  IntNullableFilter? $count;
  @JsonKey(name: '_min')
  DateTimeNullableFilter? $min;
  @JsonKey(name: '_max')
  DateTimeNullableFilter? $max;
  DateTimeNullableWithAggregatesFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
    this.$count,
    this.$min,
    this.$max,
  });
  Map<String, dynamic> toJson() => _$DateTimeNullableWithAggregatesFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class ArrayFilter<T> {
  @JsonKey(toJson: anyToJson)
  List<T>? equals;
  @JsonKey(toJson: anyToJson)
  T? has;
  @JsonKey(toJson: anyToJson)
  List<T>? hasSome;
  @JsonKey(toJson: anyToJson)
  List<T>? hasEvery;
  @JsonKey(toJson: anyToJson)
  bool? isEmpty;
  @JsonKey(toJson: anyToJson)
  int? length;
  ArrayFilter({
    this.equals,
    this.has,
    this.hasSome,
    this.hasEvery,
    this.isEmpty,
    this.length,
  });
  Map<String, dynamic> toJson() => _$ArrayFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class ArrayNullableFilter<T> {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(toJson: anyToJson)
  T? has;
  @JsonKey(toJson: anyToJson)
  List<T>? hasSome;
  @JsonKey(toJson: anyToJson)
  List<T>? hasEvery;
  @JsonKey(toJson: anyToJson)
  bool? isEmpty;
  @JsonKey(toJson: anyToJson)
  int? length;
  ArrayNullableFilter({
    this.equals,
    this.has,
    this.hasSome,
    this.hasEvery,
    this.isEmpty,
    this.length,
  });
  Map<String, dynamic> toJson() => _$ArrayNullableFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class IntFieldUpdateOperationsInput {
  int? set;
  int? increment;
  int? decrement;
  int? multiply;
  int? divide;
  IntFieldUpdateOperationsInput({ this.set, this.increment, this.decrement, this.multiply, this.divide });
  Map<String, dynamic> toJson() => _$IntFieldUpdateOperationsInputToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class NullableIntFieldUpdateOperationsInput {
  dynamic set;
  int? increment;
  int? decrement;
  int? multiply;
  int? divide;
  NullableIntFieldUpdateOperationsInput({ this.set, this.increment, this.decrement, this.multiply, this.divide });
  Map<String, dynamic> toJson() => _$NullableIntFieldUpdateOperationsInputToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DoubleFieldUpdateOperationsInput {
  double? set;
  double? increment;
  double? decrement;
  double? multiply;
  double? divide;
  DoubleFieldUpdateOperationsInput({ this.set, this.increment, this.decrement, this.multiply, this.divide });
  Map<String, dynamic> toJson() => _$DoubleFieldUpdateOperationsInputToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class NullableDoubleFieldUpdateOperationsInput {
  dynamic set;
  double? increment;
  double? decrement;
  double? multiply;
  double? divide;
  NullableDoubleFieldUpdateOperationsInput({ this.set, this.increment, this.decrement, this.multiply, this.divide });
  Map<String, dynamic> toJson() => _$NullableDoubleFieldUpdateOperationsInputToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DecimalFieldUpdateOperationsInput {
  Decimal? set;
  Decimal? increment;
  Decimal? decrement;
  Decimal? multiply;
  Decimal? divide;
  DecimalFieldUpdateOperationsInput({ this.set, this.increment, this.decrement, this.multiply, this.divide });
  Map<String, dynamic> toJson() => _$DecimalFieldUpdateOperationsInputToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class NullableDecimalFieldUpdateOperationsInput {
  dynamic set;
  Decimal? increment;
  Decimal? decrement;
  Decimal? multiply;
  Decimal? divide;
  NullableDecimalFieldUpdateOperationsInput({ this.set, this.increment, this.decrement, this.multiply, this.divide });
  Map<String, dynamic> toJson() => _$NullableDecimalFieldUpdateOperationsInputToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class ArrayFieldUpdateOperationsInput<T> {
  @JsonKey(toJson: anyToJson)
  List<T>? set;
  @JsonKey(toJson: anyToJson)
  T? push;
  ArrayFieldUpdateOperationsInput({ this.set, this.push });
  Map<String, dynamic> toJson() => _$ArrayFieldUpdateOperationsInputToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class NullableArrayFieldUpdateOperationsInput<T> {
  @JsonKey(toJson: anyToJson)
  dynamic set;
  @JsonKey(toJson: anyToJson)
  T? push;
  NullableArrayFieldUpdateOperationsInput({ this.set, this.push });
  Map<String, dynamic> toJson() => _$NullableArrayFieldUpdateOperationsInputToJson(this);
}
{%- for class in outline.classes %}
    {% if class.kind.is_any_kind_of_enum() %}
enum {{ class.name() }} {
        {%- for field in class.fields %}
    @JsonValue("{{ field.name }}") {{ field.name|camelcase }},
        {%- endfor %}
}
    {% else %}
@JsonSerializable(explicitToJson: true, includeIfNull: false{% if !class.kind.is_output() %}, createFactory: false{% endif %})
class {{ class.name() }} {
    {%- for field in class.fields_optional_at_last() %}
    {%- if field.should_escape_dart() %}
    @JsonKey(name: '{{ field.name }}')
    {%- else if class.kind.is_output() && field.field_type.as_ref() == "DateTime" %}
    @JsonKey(fromJson: fromTeoDateTime)
    {%- else if class.kind.is_output() && field.field_type.as_ref() == "Decimal" %}
    @JsonKey(fromJson: fromTeoDecimal)
    {%- endif %}
    {{ field.field_type }}{%- if field.type_is_not_dynamic_dart() && (field.optional || class.kind.is_output()) %}?{%- endif %} {{ field.name|escape_dart }};
    {%- endfor %}
    {{ class.name() }}({
    {%- for field in class.fields_optional_at_last() %}
        {% if !(field.type_is_dynamic_dart() || field.optional || class.kind.is_output()) %}required {% endif %}this.{{ field.name|escape_dart }},
    {%- endfor %}
    });
    {%- if class.kind.is_output() %}
    factory {{ class.name() }}.fromJson(Map<String, dynamic> json) => _${{ class.name() }}FromJson(json);
    {%- endif %}
    Map<String, dynamic> toJson() => _${{ class.name() }}ToJson(this);
}
    {%- endif %}
{%- endfor %}
{% for delegate in outline.delegates %}
class {{ delegate.model_name }}Delegate {
  String? $token;
  {{ delegate.model_name }}Delegate(this.$token);
  {%- for action in delegate.actions %}
  Future<{{ action.response }}> {{ action.name }}(dynamic args) async {
    return await request("{{ action.name }}", "{{ delegate.model_name }}", args, $token, {{ delegate.value_for_data_transformer_dart(action.name) }}, {{ delegate.value_for_meta_transformer_dart(action.name) }});
  }
  {%- endfor %}
}
{% endfor %}
class {{ conf.object_name|capitalize_first }} {
  String? $token;
  {%- for delegate in outline.delegates %}
  late {{ delegate.model_name|capitalize_first }}Delegate {{ delegate.model_name|camelcase }} = {{ delegate.model_name|capitalize_first }}Delegate($token);
  {%- endfor %}
  {{ conf.object_name|capitalize_first }} $withToken(String token) => {{ conf.object_name|capitalize_first }}(token);
  {{ conf.object_name|capitalize_first }}(this.$token);
}

final {{ conf.object_name }} = {{ conf.object_name|capitalize_first }}(null);
