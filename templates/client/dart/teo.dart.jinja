library {{ conf.inferred_package_name_snake_case() }};

import 'dart:convert';
import 'package:json_annotation/json_annotation.dart';
import 'package:http/http.dart' as http;
import 'package:decimal/decimal.dart';

part '{{ conf.inferred_package_name_snake_case() }}.g.dart';

@JsonSerializable(explicitToJson: true, includeIfNull: true, createFactory: false)
class ExplicitNull {
  dynamic set;
  ExplicitNull();
  Map<String, dynamic> toJson() => _$ExplicitNullToJson(this);
}

enum SortOrder {
  @JsonValue("asc") asc,
  @JsonValue("desc") desc,
}

class Response<D> {
  D data;
  Response({ required this.data });
}

class ResponseWithMeta<D, M> {
  D data;
  M meta;
  ResponseWithMeta({ required this.data, required this.meta });
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class PagingInfo {
  int count;
  int numberOfPages;
  PagingInfo({ required this.count, required this.numberOfPages });
  factory PagingInfo.fromJson(Map<String, dynamic> json) =>
      _$PagingInfoFromJson(json);
  Map<String, dynamic> toJson() => _$PagingInfoToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class TokenInfo {
  String token;
  TokenInfo({ required this.token });
  factory TokenInfo.fromJson(Map<String, dynamic> json) =>
      _$TokenInfoFromJson(json);
  Map<String, dynamic> toJson() => _$TokenInfoToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class TeoError {
  String type;
  String message;
  Map<String, String>? errors;
  TeoError({ required this.type, required this.message, this.errors });
  factory TeoError.fromJson(Map<String, dynamic> json) => _$TeoErrorFromJson(json);
  Map<String, dynamic> toJson() => _$TeoErrorToJson(this);
}

Future<dynamic> request(
    String action, String model, dynamic args, String? token,
    dynamic Function(dynamic) data, dynamic Function(dynamic)? meta
    ) async {
  final res = await http.post(
    Uri.parse('{{ conf.host }}/$model/action/$action'),
    headers: token != null ? {
      "Authorization": "Bearer $token"
    } : { },
    body: jsonEncode(args),
  );
  final Map<String, dynamic> jsonData = jsonDecode(res.body);
  if (jsonData.containsKey("error")) {
    throw TeoError.fromJson(jsonData["error"]);
  } else {
    if (meta == null) {
      return Response(data: data(jsonData["data"]));
    } else {
      return ResponseWithMeta(data: data(jsonData["data"]), meta: meta(jsonData["meta"]));
    }
  }
}

dynamic anyToJson(dynamic any) {
  if (any is List) {
    return any.map((e) => anyToJson(e)).toList();
  } else if (any is int) {
    return any;
  } else if (any is double) {
    return any;
  } else if (any is bool) {
    return any;
  } else if (any is String) {
    return any;
  } else if (any == null) {
    return null;
  } else if (any is DateTime) {
    return any.toIso8601String();
  } else {
    return any.toJson();
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class ObjectIdFilter {
  String? equals;
  @JsonKey(name: 'in')
  List<String>? isOneOf;
  List<String>? notIn;
  String? lt;
  String? lte;
  String? gt;
  String? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  ObjectIdFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$ObjectIdFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class ObjectIdNullableFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<String>? isOneOf;
  List<String>? notIn;
  String? lt;
  String? lte;
  String? gt;
  String? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  ObjectIdNullableFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$ObjectIdNullableFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class StringFilter {
  String? equals;
  @JsonKey(name: 'in')
  List<String>? isOneOf;
  List<String>? notIn;
  String? lt;
  String? lte;
  String? gt;
  String? gte;
  String? contains;
  String? startsWith;
  String? endsWith;
  String? matches;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  StringFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.contains,
    this.startsWith,
    this.endsWith,
    this.matches,
    this.not,
  });
  Map<String, dynamic> toJson() => _$StringFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class StringNullableFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<String>? isOneOf;
  List<String>? notIn;
  String? lt;
  String? lte;
  String? gt;
  String? gte;
  String? contains;
  String? startsWith;
  String? endsWith;
  String? matches;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  StringNullableFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.contains,
    this.startsWith,
    this.endsWith,
    this.matches,
    this.not,
  });
  Map<String, dynamic> toJson() => _$StringNullableFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class BoolFilter {
  bool? equals;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  BoolFilter({
    this.equals,
    this.not,
  });
  Map<String, dynamic> toJson() => _$BoolFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class BoolNullableFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  BoolNullableFilter({
    this.equals,
    this.not,
  });
  Map<String, dynamic> toJson() => _$BoolNullableFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class IntFilter {
  int? equals;
  @JsonKey(name: 'in')
  List<int>? isOneOf;
  List<int>? notIn;
  int? lt;
  int? lte;
  int? gt;
  int? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  IntFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$IntFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class IntNullableFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<int>? isOneOf;
  List<int>? notIn;
  int? lt;
  int? lte;
  int? gt;
  int? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  IntNullableFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$IntNullableFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DoubleFilter {
  double? equals;
  @JsonKey(name: 'in')
  List<double>? isOneOf;
  List<double>? notIn;
  double? lt;
  double? lte;
  double? gt;
  double? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  DoubleFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$DoubleFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DoubleNullableFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<double>? isOneOf;
  List<double>? notIn;
  double? lt;
  double? lte;
  double? gt;
  double? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  DoubleNullableFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$DoubleNullableFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DecimalFilter {
  Decimal? equals;
  @JsonKey(name: 'in')
  List<Decimal>? isOneOf;
  List<Decimal>? notIn;
  Decimal? lt;
  Decimal? lte;
  Decimal? gt;
  Decimal? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  DecimalFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$DecimalFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DecimalNullableFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<Decimal>? isOneOf;
  List<Decimal>? notIn;
  Decimal? lt;
  Decimal? lte;
  Decimal? gt;
  Decimal? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  DecimalNullableFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$DecimalNullableFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DateFilter {
  String? equals;
  @JsonKey(name: 'in')
  List<String>? isOneOf;
  List<String>? notIn;
  String? lt;
  String? lte;
  String? gt;
  String? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  DateFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$DateFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DateNullableFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<String>? isOneOf;
  List<String>? notIn;
  String? lt;
  String? lte;
  String? gt;
  String? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  DateNullableFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$DateNullableFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DateTimeFilter {
  DateTime? equals;
  @JsonKey(name: 'in')
  List<DateTime>? isOneOf;
  List<DateTime>? notIn;
  DateTime? lt;
  DateTime? lte;
  DateTime? gt;
  DateTime? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  DateTimeFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$DateTimeFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class DateTimeNullableFilter {
  @JsonKey(toJson: anyToJson)
  dynamic equals;
  @JsonKey(name: 'in')
  List<DateTime>? isOneOf;
  List<DateTime>? notIn;
  DateTime? lt;
  DateTime? lte;
  DateTime? gt;
  DateTime? gte;
  @JsonKey(toJson: anyToJson)
  dynamic not;
  DateTimeNullableFilter({
    this.equals,
    this.isOneOf,
    this.notIn,
    this.lt,
    this.lte,
    this.gt,
    this.gte,
    this.not,
  });
  Map<String, dynamic> toJson() => _$DateTimeNullableFilterToJson(this);
}

@JsonSerializable(explicitToJson: true, includeIfNull: false, createFactory: false)
class ArrayFilter<T> {
  @JsonKey(toJson: anyToJson)
  List<T>? equals;
  @JsonKey(toJson: anyToJson)
  T? has;
  @JsonKey(toJson: anyToJson)
  List<T>? hasSome;
  @JsonKey(toJson: anyToJson)
  List<T>? hasEvery;
  @JsonKey(toJson: anyToJson)
  bool? isEmpty;
  @JsonKey(toJson: anyToJson)
  int? length;
  ArrayFilter({
    this.equals,
    this.has,
    this.hasSome,
    this.hasEvery,
    this.isEmpty,
    this.length,
  });
  Map<String, dynamic> toJson() => _$ArrayFilterToJson(this);
}
