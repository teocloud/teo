use crate::gen::interface::client::conf::Conf;
use crate::gen::interface::client::kind::Kind;
use crate::prelude::Graph;

pub(crate) async fn gen(graph: &Graph, conf: &Conf) -> std::io::Result<()> {
    match conf.kind {
        Kind::TypeScript => generate_client_typed(TypeScriptClientGenerator::new(), graph, client).await,
        Kind::Swift => generate_client_typed(SwiftClientGenerator::new(), graph, client).await,
        Kind::Kotlin => generate_client_typed(KotlinClientGenerator::new(), graph, client).await,
        Kind::CSharp => generate_client_typed(CSharpClientGenerator::new(), graph, client).await,
        Kind::Dart => generate_client_typed(DartClientGenerator::new(), graph, client).await,
    }
}

async fn generate_client_typed<T: ClientGenerator>(client_generator: T, graph: &Graph, client: &ClientGeneratorConf) -> std::io::Result<()> {
    let dest = &client.dest;
    let package = client.package;
    let git_commit = client.git_commit;
    let mut module_dest = dest.clone();
    let should_git_init = !dest.exists();
    if package {
        let package_generator = FileUtil::new(dest);
        client_generator.generate_package_files(graph, client, &package_generator).await?;
        module_dest.push(Path::new(client_generator.module_directory_in_package(client).as_str()));
    }
    let module_generator = FileUtil::new(module_dest);
    client_generator.generate_module_files(graph, client, &module_generator).await?;
    client_generator.generate_main(graph, client, &module_generator).await?;
    if git_commit && package {
        std::env::set_current_dir(dest).unwrap();
        if should_git_init {
            // git init
            Command::new("git")
                .arg("init")
                .output().unwrap();
        }
        // git add -A
        Command::new("git")
            .arg("add")
            .arg("-A")
            .output().unwrap();
        Command::new("git")
            .arg("commit")
            .arg("-m")
            .arg("generated by teo")
            .output().unwrap();
        // git commit
    }
    Ok(())
}
