schema = {
    SOI
    ~ (import_statement | config_declaration | enum_declaration | model_declaration | let_declaration | dataset_declaration | comment_block | EMPTY_LINES | CATCH_ALL)*
    ~ EOI
}

// #############
// constants
// #############
WHITESPACE = _{ SPACE_SEPARATOR | "\t" }
EMPTY_LINES = @{ (WHITESPACE* ~ NEWLINE)+ }
BLOCK_OPEN = { "{" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
BLOCK_CLOSE = { "}" }
ENUM_KEYWORD = { "enum" }
MODEL_KEYWORD = { "model" }
SERVER_KEYWORD = { "server" }
CONNECTOR_KEYWORD = { "connector" }
CLIENT_KEYWORD = { "client" }
ENTITY_KEYWORD = { "entity" }
IMPORT_KEYWORD = _{ "import" }
FROM_KEYWORD = _{ "from" }
DATASET_KEYWORD = _{ "dataset" }
AUTOSEED_KEYWORD = { "autoseed" }
GROUP_KEYWORD = _{ "group" }
RECORD_KEYWORD = _{ "record" }
COLON = { ":" }
TRAILING_COMMA = @{ "," }
RANGE_OPEN = { ".." }
RANGE_CLOSE = { "..." }
CATCH_ALL = { (!NEWLINE ~ ANY)+ ~ NEWLINE? }
BLOCK_LEVEL_CATCH_ALL = { !BLOCK_CLOSE ~ CATCH_ALL }

// #############
// identifier
// #############
identifier = @{ ASCII_ALPHANUMERIC ~ ( "_" | ASCII_ALPHANUMERIC)* }

// #############
// type
// #############
field_type = { identifier ~ optionality? ~ arity? ~ optionality? }
arity = {"[]" | "{}" }
optionality = { "?" }

// #############
// import
// #############

import_statement = {
    IMPORT_KEYWORD
    ~ (import_identifier_list ~ FROM_KEYWORD)?
    ~ string_literal
}

import_identifier_list = { BLOCK_OPEN ~ (identifier ~ ("," ~ identifier)*)? ~ TRAILING_COMMA? ~ BLOCK_CLOSE }

// #############
// numeric literals
// #############
numeric_literal = @{ ("-")? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }

// #############
// string literals
// #############
ASCII_CONTROL_CHARACTER = _{ '\u{0000}'..'\u{001F}' }
string_escape = _{ "\\" ~ ANY }
string_content = @{ (string_escape | !("\"" | ASCII_CONTROL_CHARACTER) ~ ANY)* }
string_literal = ${ "\"" ~ string_content ~ "\"" }

// #############
// regexp literals
// #############
regexp_content = @{ (string_escape | !("/") ~ ANY)+ }
regexp_literal = ${ "/" ~ regexp_content ~ "/" }

// #############
// bool literals
// #############
bool_literal = @{ "true" | "false" }

// #############
// null literals
// #############
null_literal = { "null" }

// #############
// enum choice literals
// #############
enum_choice_literal = { "." ~ identifier ~ argument_list? }

// #############
// range literals
// #############
range_literal = { range_end ~ (RANGE_CLOSE | RANGE_OPEN) ~ range_end }
range_end = { numeric_literal | unit_without_range_literal }

// #############
// tuple literals
// #############
tuple_literal = { "(" ~ ("," | (expression ~ "," ~ ( expression ~ ("," ~ expression)* ~ ","?)*)) ~ ")" }

// #############
// array literals
// #############
array_literal = { "[" ~ (expression ~ ( "," ~ expression )* ~ ","?)? ~ "]" }

// #############
// dict literals
// #############
named_expression = { expression ~ ":" ~ expression }
dictionary_literal = { "{" ~ (named_expression ~ ( "," ~ named_expression )* ~ ","?)? ~ "}" }

// #############
// subscript
// #############
subscript = { "[" ~ expression ~ "]" }

// #############
// comments
// #############
comment_token = { "@" ~ (!(WHITESPACE | NEWLINE) ~ ANY)+ }
doc_content = @{ (!NEWLINE ~ ANY)* }
triple_comment = { WHITESPACE* ~ "///" ~ comment_token? ~ doc_content }
double_comment = { WHITESPACE* ~ (!"///") ~ "//" ~ doc_content }
triple_comment_block = { ((triple_comment) ~ NEWLINE?)+ }
double_comment_block = { ((double_comment) ~ NEWLINE?)+ }
comment_block = { triple_comment_block | double_comment_block }
trailing_comment = ${ triple_comment | double_comment }

// #############
// operators
// #############
ADD = { "+" }
SUB = { "-" }
MUL = { "*" }
DIV = { "/" }
MOD = { "%" }
BI_AND = { "&" }
BI_XOR = { "^" }
BI_OR = { "|" }
BINARY_OPERATOR = _{ MUL | DIV | MOD | ADD | SUB | BI_AND | BI_XOR | BI_OR }
// OPERATORS = { "!" | "&&" | "||" | ">" | "<" | ">>" | "<<" }
negation = { "-" ~ unit }
bitwise_negation = { "~" ~ unit }
arith_expr = { operand ~ (BINARY_OPERATOR ~ operand)+ }
nullish_coalescing = { unit ~ ("??" ~ unit)+ }

// #############
// group
// #############
group = { "(" ~ expression ~ ")" }

// #############
// unit & expression
// #############

unit = {
    group |
    null_literal |
    bool_literal |
    range_literal |
    numeric_literal |
    string_literal |
    regexp_literal |
    enum_choice_literal |
    tuple_literal |
    array_literal |
    dictionary_literal |
    identifier
    ~ (subscript | argument_list | "." ~ identifier)*
}

identifier_unit = {
    identifier
    ~ (subscript | argument_list | (NEWLINE | WHITESPACE)* ~ "." ~ (NEWLINE | WHITESPACE)* ~ identifier)*
}

unit_without_range_literal = {
    group |
    null_literal |
    bool_literal |
    numeric_literal |
    string_literal |
    regexp_literal |
    enum_choice_literal |
    tuple_literal |
    array_literal |
    dictionary_literal |
    identifier
    ~ (subscript | argument_list | "." ~ identifier)*
}

operand = {
    negation |
    bitwise_negation |
    nullish_coalescing |
    unit |
    pipeline
}

expression = {
    negation |
    bitwise_negation |
    arith_expr |
    nullish_coalescing |
    unit |
    pipeline
}

// #############
// variable & constant declaration
// #############

let_declaration = { "let" ~ identifier ~ "=" ~ expression }

// #############
// arguments
// #############
argument_list = { "(" ~ (NEWLINE | WHITESPACE)* ~ (argument ~ ((NEWLINE | WHITESPACE)* ~ "," ~ (NEWLINE | WHITESPACE)* ~ argument ~ (NEWLINE | WHITESPACE)*)*)? ~ TRAILING_COMMA? ~ (NEWLINE | WHITESPACE)* ~ ")" }
argument = { named_argument | empty_argument | expression }
empty_argument = { identifier ~ ":" }
named_argument = { identifier ~ ":" ~ expression }

// #############
// function call, decorator and pipeline
// #############
item_decorator = { "@" ~ identifier_unit }
block_decorator = { "@@" ~ identifier_unit }
pipeline = { "$" ~ identifier_unit }

// #############
// config blocks
// #############

config_keywords = { SERVER_KEYWORD | CONNECTOR_KEYWORD | CLIENT_KEYWORD | ENTITY_KEYWORD }

config_declaration = {
    config_keywords
    ~ identifier?
    ~ BLOCK_OPEN
    ~ (config_item | comment_block | EMPTY_LINES)*
    ~ BLOCK_CLOSE
}

config_item = {
    identifier ~ expression
}

// #############
// enum
// #############
enum_declaration = {
    triple_comment_block? ~
    (item_decorator ~ (NEWLINE | WHITESPACE)*)*
    ~ ENUM_KEYWORD
    ~ identifier
    ~ BLOCK_OPEN
    ~ (enum_value_declaration | (block_decorator ~ NEWLINE) | comment_block | EMPTY_LINES | BLOCK_LEVEL_CATCH_ALL)*
    ~ BLOCK_CLOSE
}

enum_value_declaration = { triple_comment_block? ~ item_decorator* ~ identifier ~ trailing_comment? ~ NEWLINE }

// #############
// model
// #############
model_declaration = {
    triple_comment_block? ~
    (item_decorator ~ (NEWLINE | WHITESPACE)*)*
    ~ MODEL_KEYWORD
    ~ identifier
    ~ BLOCK_OPEN
    ~ (field_declaration | (block_decorator ~ NEWLINE) | comment_block | EMPTY_LINES | BLOCK_LEVEL_CATCH_ALL)*
    ~ BLOCK_CLOSE
}

// #############
// field
// #############
field_declaration = {
    triple_comment_block? ~
    (item_decorator ~ (NEWLINE | WHITESPACE)*)*
    ~ identifier
    ~ COLON
    ~ field_type
    ~ trailing_comment?
    ~ NEWLINE
}

// #############
// dataset
// #############
dataset_declaration = {
    AUTOSEED_KEYWORD? ~ DATASET_KEYWORD ~ identifier ~ BLOCK_OPEN ~ (dataset_group_declaration | comment_block)* ~ BLOCK_CLOSE
}
dataset_group_declaration = {
    GROUP_KEYWORD ~ identifier ~ BLOCK_OPEN ~ (dataset_group_record_declaration | comment_block)* ~ BLOCK_CLOSE
}
dataset_group_record_declaration = {
    RECORD_KEYWORD ~ identifier ~ dictionary_literal
}
